// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "openzeppelin-contracts/contracts/token/ERC20/ERC20.sol";
import "src/utils/cheatcodes.sol";
import "./HarvestFinanceExploit.sol";

// https://tools.blocksec.com/tx/eth/0x35f8d2f572fceaac9288e5d462117850ef2694786992a8c3f6d02612277b0877

contract HarvestFinanceExploitTest is Test {
    uint256 usdcInitialAmount = 0;
    uint256 usdtInitialAmount = 0;

    ERC20 constant dai = ERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);
    ERC20 constant usdc = ERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
    ITetherToken constant usdt = ITetherToken(0xdAC17F958D2ee523a2206206994597C13D831ec7);
    ERC20 constant tusd = ERC20(0x0000000000085d4780B73119b644AE5ecd22b376);
    ERC20 constant weth = ERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);

    HarvestFinanceExploit exploit;

    function setUp() public {
        vm.createSelectFork("mainnet", 11129473);

        exploit = new HarvestFinanceExploit();

        vm.deal(address(exploit), 20 ether);
        deal(address(usdc), address(exploit), usdcInitialAmount);
        deal(address(usdt), address(exploit), usdtInitialAmount);
    }

    function testExploit() public {
        exploit.exploit();
        emit log_named_uint("WETH balance", weth.balanceOf(address(exploit)) / (10 ** weth.decimals()));
    }
}
