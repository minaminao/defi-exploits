// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

library UniswapV2FlashSwapLibrary {
    function getAmountInSingle(uint256 amountOut) internal pure returns (uint256 amountIn) {
        amountIn = (amountOut * 1000) / 997 + 1;
    }

    function getAmountInMulti(
        uint256 amountAOut,
        uint256 amountBIn,
        uint256 amountBOut,
        uint256 reserveA,
        uint256 reserveB
    ) internal pure returns (uint256 amountAIn) {
        uint256 amountBInExcludeFee = (amountBIn * 997) / 1000;
        amountAIn = (
            (((reserveA * reserveB) / (reserveB - amountBOut + amountBInExcludeFee) + 1) - reserveA + amountAOut) * 1000
        ) / 997 + 1;
    }

    function getAmountWastedTransfer(
        uint256 amountAIn,
        uint256 amountAOut,
        uint256 amountBIn,
        uint256 amountBOut,
        uint256 reserveA,
        uint256 reserveB
    ) internal pure returns (uint256 amountWastedTrasnfer) {
        uint256 balanceA = reserveA - amountAOut + amountAIn;
        uint256 balanceB = reserveB - amountBOut + amountBIn;
        uint256 balanceAAdjusted = balanceA * 1000 - amountAIn * 3;
        uint256 balanceBAdjusted = balanceB * 1000 - amountBIn * 3;
        return balanceAAdjusted * balanceBAdjusted - reserveA * reserveB * (1000 ** 2);
    }
}
